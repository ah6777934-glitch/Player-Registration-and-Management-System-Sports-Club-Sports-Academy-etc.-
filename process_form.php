<?php
/**
 * Project: Gold Star Academy - Player Management System
 * Author: Ahmed Maher
 * Date: 27-10-2025
 *
 * File: process_form.php (MySQL Version)
 * Description: Handles player registration form submission, saves data to the MySQL database,
 * and manages player photo uploads. Uses a two-step process (INSERT then UPDATE)
 * to safely handle image naming based on the generated player ID.
 */

// --- Development Settings (Show Errors) ---
// NOTE: Should be disabled in production for security.
ini_set('display_errors', 1);
error_reporting(E_ALL);

// --- Set Content Type ---
// Ensure proper character encoding for Arabic content and potential error messages
header('Content-Type: text/html; charset=utf-8');

// --- Check Request Method ---
// Only process POST requests to prevent direct access or unintended submissions
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // --- 1. Database Connection Configuration ---
    $db_host = "YOUR_HOST"; // 
$db_name = "YOUR_DB_NAME";
$db_user = "YOUR_USERNAME";
$db_pass = ""; // <--  YOUR_PASSWORD
    
    // Establish database connection
    $conn = new mysqli($db_host, $db_user, $db_pass, $db_name);
    
    // Check connection for errors
    if ($conn->connect_error) {
        // Log error in production instead of exposing details
        // error_log("Database Connection Failed: " . $conn->connect_error);
        die("Database Connection Failed: " . $conn->connect_error);
    }
    // Set character set to UTF-8 for proper Arabic support
    $conn->set_charset("utf8mb4");

    // --- 2. Retrieve and Prepare Form Data ---
    // Use trim() and check for empty strings, setting NULL for optional fields.
    // TODO: Implement more robust server-side validation (e.g., check NID length/format, phone format, age range).
    $playerName = trim($_POST['playerName']);
    $playerNID  = !empty(trim($_POST['playerNID'])) ? trim($_POST['playerNID']) : null; // Set to NULL if empty
    $fatherName = trim($_POST['fatherName']);
    $fatherNID  = !empty(trim($_POST['fatherNID'])) ? trim($_POST['fatherNID']) : null; // Set to NULL if empty
    $fatherJob  = trim($_POST['fatherJob']);
    $motherName = trim($_POST['motherName']);
    $motherNID  = !empty(trim($_POST['motherNID'])) ? trim($_POST['motherNID']) : null; // Set to NULL if empty
    $motherJob  = trim($_POST['motherJob']);
    $age        = (int)$_POST['age']; // Cast to integer
    $playerDob  = trim($_POST['playerDob']); // TODO: Validate date format
    $phoneNumber= trim($_POST['phoneNumber']);
    $address    = trim($_POST['address']);
    $playerNumber = !empty(trim($_POST['playerNumber'])) ? trim($_POST['playerNumber']) : null; // Set to NULL if empty
    $gender     = $_POST['gender'];
    $sport      = isset($_POST['sport']) ? $_POST['sport'] : 'Karate'; // Default sport if checkbox unchecked (though 'required' should prevent this)
    $beltDegree = $_POST['beltDegree'];
    $subscriptionFee = trim($_POST['subscriptionFee']); // TODO: Validate as numeric/decimal

    // Default photo path
    $initialPhotoPath = 'N/A'; // Will be inserted initially

    // --- 3. Insert Player Data (Without Final Photo Path) ---
    // This ensures we get a definite player_id before naming the photo file.
    try {
        // SQL query with placeholders for prepared statement
        $sql = "INSERT INTO players 
                (player_name, player_photo, player_nid, player_dob, age, gender, phone_number, address,
                 father_name, father_nid, father_job,
                 mother_name, mother_nid, mother_job,
                 sport, belt_degree, player_number, subscription_fee)
                VALUES 
                (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        
        // Prepare the statement
        $stmt = $conn->prepare($sql);
        
        // Bind parameters (type string: s=string, i=integer, d=double)
        // Insert with $initialPhotoPath ('N/A') first
        $stmt->bind_param("ssssissssssssssssd", 
            $playerName, $initialPhotoPath, $playerNID, $playerDob, $age, $gender, $phoneNumber, $address,
            $fatherName, $fatherNID, $fatherJob,
            $motherName, $motherNID, $motherJob,
            $sport, $beltDegree, $playerNumber, $subscriptionFee
        );
        
        // Execute the insert statement
        $stmt->execute();
        
        // Get the ID generated by the database for the new player
        $new_player_id = $stmt->insert_id; 
        
        // Close the insert statement
        $stmt->close();
        
        // --- 4. Process Image Upload and Update Record ---
        // Proceed only if the initial insert was successful (got an ID) and a photo was uploaded
        if ($new_player_id > 0 && isset($_FILES['playerPhoto']) && $_FILES['playerPhoto']['error'] == UPLOAD_ERR_OK) {
            
            $upload_dir = 'uploads/'; // Target directory for photos
            // Ensure the uploads directory exists, create if not
            if (!is_dir($upload_dir)) {
                mkdir($upload_dir, 0755, true); // Create recursively with permissions
            }

            $file_info = pathinfo($_FILES['playerPhoto']['name']);
            // Get file extension, default to 'jpg' if none found
            $file_extension = isset($file_info['extension']) ? strtolower($file_info['extension']) : 'jpg'; 
            // TODO: Validate allowed image extensions (jpg, jpeg, png, gif).
            // TODO: Validate image size and potentially resize/compress the image.

            // Create the final, unique filename using the actual player ID
            $new_filename = $new_player_id . '.' . $file_extension; 
            $destination = $upload_dir . $new_filename; // Full path for the new image

            // Move the uploaded temporary file to the final destination
            if (move_uploaded_file($_FILES['playerPhoto']['tmp_name'], $destination)) {
                $finalPhotoPath = $destination; // The actual path to the saved image
                
                // --- Update the player record with the correct photo path ---
                $update_stmt = $conn->prepare("UPDATE players SET player_photo = ? WHERE player_id = ?");
                $update_stmt->bind_param("si", $finalPhotoPath, $new_player_id);
                $update_stmt->execute();
                $update_stmt->close();
                // NOTE: Consider deleting the uploaded file if the UPDATE fails.
            } else {
                 // Optional: Log or display an error if move_uploaded_file fails
                 // error_log("Failed to move uploaded file for player ID: " . $new_player_id);
            }
        } // End image processing block
        
        // --- Close Database Connection ---
        $conn->close();

        // --- 5. Redirect to Success Page ---
        // Pass the new player ID and name via URL parameters
        header('Location: success.php?code=' . $new_player_id . '&name=' . urlencode($playerName));
        exit; // Terminate script execution after redirection

    } catch (mysqli_sql_exception $e) {
        // --- Handle Database Errors (e.g., Duplicate NID) ---
        
        // Check for specific 'Duplicate entry' error (MySQL error code 1062)
        if ($e->getCode() == 1062) { 
            // Display user-friendly error for duplicate National ID
            // TODO: Improve error display styling.
            echo '<div style="text-align: center; font-family: Arial, sans-serif; margin-top: 50px; background: #fff; border: 2px solid red; padding: 20px; border-radius: 10px; width: 90%; max-width: 400px; margin-left: auto; margin-right: auto; box-sizing: border-box;">';
            echo "<h1>خطأ في التسجيل</h1><p>الرقم القومي الذي أدخلته مسجل بالفعل من قبل.</p>";
            echo '<a href="register.html" style="padding: 10px 20px; background: #8b4513; color: white; text-decoration: none; border-radius: 5px;">الرجوع لصفحة التسجيل</a>';
            echo '</div>';
        } else {
            // Display generic error message for other SQL exceptions
            // Log the detailed error in production: error_log("SQL Error: " . $e->getMessage());
            echo "حدث خطأ غير متوقع أثناء تسجيل البيانات. برجاء المحاولة مرة أخرى لاحقاً.";
            // echo "Error Details (Dev): " . $e->getMessage(); // Show specific error during development
        }
        // Ensure connection is closed even if an error occurs
        if ($conn) $conn->close();
        exit; // Stop script execution after handling error
    } // End try-catch block

} else {
    // --- Handle Direct Access (Non-POST Request) ---
    // Redirect or display error if accessed directly
    // header('Location: register.html'); // Option: Redirect back to form
    echo "Error: You cannot access this page directly.";
    exit;
} // End request method check
?>